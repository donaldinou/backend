<?php

namespace Viteloge\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends EntityRepository
{
    public function getCountByFlag( $traitement )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('annonce.flag, count(annonce.id) as nbAnnonces')
            ->from('Viteloge\AdminBundle\Entity\Annonce', 'annonce' )
            ->where( 'annonce.traitement = :traitement' )
            ->andWhere( 'annonce.dateSuppression IS NULL' )
            ->groupby( 'annonce.flag' )
            ->setParameter( 'traitement', $traitement );
        return $qb->getQuery()->getResult();
    }

    public function getCountMisc( $agence )
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult( 'nbAnnonces', 'nbAnnonces' );
        $rsm->addScalarResult( 'lastUpdate', 'lastUpdate' );
        if ( $agence->idAgenceMere != 0 ) {
            $query = $this->_em->createNativeQuery(
                "SELECT COUNT(idAnnonce) AS nbAnnonces, MAX(DateUpdate) as lastUpdate FROM annonce WHERE DateSuppression IS NULL AND idAgence = :idAgence OR ( idAgence = :idAgenceMere and agence = :idAgence )", $rsm )
                ->setParameter( 'idAgence', $agence->id )
                ->setParameter( 'idAgenceMere', $agence->idAgenceMere );
        } else {
            $query = $this->_em->createNativeQuery(
                "SELECT COUNT(idAnnonce) as nbAnnonces, MAX(DateUpdate) as lastUpdate FROM annonce WHERE DateSuppression IS NULL AND idAgence IN ( SELECT idAgence FROM agence WHERE idAgenceMere = :idAgence OR idAgence = :idAgence )", $rsm )
                ->setParameter( 'idAgence', $agence->id );
        }
        $x = $query->getScalarResult();
        return $x[0];
    }
    
    public function getCountExported( $traitement, $agence = null )
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult( 'nbAnnonces', 'nbAnnonces' );

        if ( $traitement ) {
            $query = $this->_em->createNativeQuery(
                "SELECT COUNT(*) as nbAnnonces FROM export_annonce_src WHERE idAgence = :idAgence and transaction = :type", $rsm
                                                   )
                ->setParameter( 'idAgence', $traitement->agence->id )
                ->setParameter( 'type', $traitement->TypeTransactionTraitement );
        } else if ( $agence ) {
            $query = $this->_em->createNativeQuery(
                "SELECT COUNT(*) as nbAnnonces FROM export_annonce_src WHERE idAgence IN ( SELECT idAgence FROM agence WHERE idAgenceMere = :idAgence OR idAgence = :idAgence )", $rsm
                                                   )
                ->setParameter( 'idAgence', $agence->id );
        }
        $x = $query->getScalarResult();
        return $x[0]['nbAnnonces'];
    }

    public function getCountByInsee( $agence )
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult( 'fullName', 'fullName' );
        $rsm->addScalarResult( 'nbAnnonces', 'nbAnnonces' );

        if ( $agence->idAgenceMere != 0 ) {
            $req_agence = "idAgence = :idAgence OR ( idAgence = :idAgenceMere and agence = :specifAgence )";
        } else {
            $req_agence = "idAgence IN ( SELECT idAgence FROM agence WHERE idAgenceMere = :idAgence OR idAgence = :idAgence )";
        }

        $req  = <<<EOREQ
SELECT COUNT(*) as nbAnnonces,
       TRIM(CONCAT(article,' ',nom, ' (', codeDepartement,')')) as fullName
FROM (
    SELECT 1 as presence, codeInsee
    FROM annonce
    WHERE DateSuppression IS NULL AND $req_agence
      ) as counts
LEFT JOIN insee_communes ON insee_communes.codeInsee = counts.codeInsee            
GROUP BY counts.codeInsee            
ORDER BY nbAnnonces DESC
LIMIT 30
EOREQ;
        
        $query = $this->_em->createNativeQuery( $req, $rsm )
            ->setParameter( 'idAgence', $agence->id );
        if ( $agence->idAgenceMere != 0 ) {
            $query->setParameter( 'idAgenceMere', $agence->idAgenceMere )
                ->setParameter( 'specifAgence', $agence->specif );
        }
        
        return $query->getScalarResult();
    }
    
    

    public function resetFlag( $traitement )
    {
        $dbh = $this->_em->getConnection();
        $nb = $dbh->executeUpdate(
            "UPDATE annonce SET Flag = 0 WHERE IdTraitement = ?",
            array( $traitement->id )
        );
        return $nb;
    }
    public function forceUpdate( $traitement, $including_good_ones = true )
    {
        $dbh = $this->_em->getConnection();

        $req = "UPDATE annonce SET DateUpdate = '2000-01-01' WHERE IdTraitement = ?";

        if ( ! $including_good_ones ) {
            $req .= " AND Erreur > 0";
        }
        $nb = $dbh->executeUpdate(
            $req,
            array( $traitement->id )
        );
        return $nb;
    }
    public function forceDelete( $traitement )
    {
        $dbh = $this->_em->getConnection();
        $nb = $dbh->executeUpdate(
            "UPDATE annonce SET DateSuppression = NOW() WHERE IdTraitement = ? AND DateSuppression IS NULL",
            array( $traitement->id )
        );
        return $nb;
    }
    
    
}
