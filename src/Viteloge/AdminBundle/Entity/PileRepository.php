<?php

namespace Viteloge\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * PileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PileRepository extends EntityRepository
{
    public function getPileForTraitement( $traitement, $pile_long = false )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select( 'pile' )
            ->from( 'Viteloge\AdminBundle\Entity\Pile', 'pile' )
            ->where( 'pile.traitement = :traitement' )
            ->addOrderBy( 'pile.type', 'ASC' )
            ->addOrderBy( 'pile.nextPageTraitement', 'DESC' )
            ->addOrderBy( 'pile.timestamp', 'ASC' )
            ->addOrderBy( 'pile.url', 'ASC' )
            ->setMaxResults( $pile_long ? 500 : 20 )
            ->setParameter( 'traitement', $traitement );
        return $qb->getQuery()->getResult();
    }

    public function clearFor( $traitement, $id = null )
    {
        $dbh = $this->_em->getConnection();
        $nb = $dbh->executeUpdate(
            "DELETE FROM pile WHERE idTraitement = ?",
            array( $traitement->id )
        );
        return $nb;
    }

    public function getPileCountForTraitement( $traitement )
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult( 'nbPiles', 'nbPiles' );
        $query = $this->_em->createNativeQuery(
            "SELECT COUNT(IdPile) AS nbPiles FROM pile WHERE idTraitement = :idTraitement", $rsm )
            ->setParameter( 'idTraitement', $traitement->id )
        ;
        $x = $query->getScalarResult();
        return (int) $x[0]["nbPiles"];
        
    }
}
